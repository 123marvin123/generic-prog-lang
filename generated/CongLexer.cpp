
// Generated from /Users/haschker/Arbeitsbereich/generic-prog-lang/grammar/CongLexer.g4 by ANTLR 4.13.2


#include "CongLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CongLexerStaticData final {
  CongLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CongLexerStaticData(const CongLexerStaticData&) = delete;
  CongLexerStaticData(CongLexerStaticData&&) = delete;
  CongLexerStaticData& operator=(const CongLexerStaticData&) = delete;
  CongLexerStaticData& operator=(CongLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag conglexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CongLexerStaticData> conglexerLexerStaticData = nullptr;

void conglexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (conglexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(conglexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CongLexerStaticData>(
    std::vector<std::string>{
      "CONCEPT", "FUNCTION", "NAMESPACE", "LET", "NAME", "DESCRIPTION", 
      "GENERICIMPL", "REQUIRES", "TIME", "SPACE", "LANG", "QUOTE", "EVAL", 
      "LBRACE", "RBRACE", "LPAREN", "RPAREN", "COLON", "QUESTION_MARK", 
      "SEMI", "AMP", "ARROW", "COMMA", "ASSIGN", "EQUAL", "NOT_EQUAL", "PLUS", 
      "MINUS", "MUL", "DIV", "MOD", "POW", "LT", "LESS_EQUAL", "GT", "GREATER_EQUAL", 
      "DOUBLE_COLON", "LAMBDA_ARROW", "OPEN_BINDING", "DYNAMIC_ANNOTATOR", 
      "REAL", "BOOL", "INTEGER", "STRING", "IDENTIFIER", "WHITESPACE", "COMMENT", 
      "LINE_COMMENT", "OTHER"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'concept'", "'fun'", "'namespace'", "'let'", "'name'", "'description'", 
      "'generic'", "'requires'", "'time'", "'space'", "'lang'", "'quote'", 
      "'eval'", "'{'", "'}'", "'('", "')'", "':'", "'\\u003F'", "';'", "'&'", 
      "'->'", "','", "'='", "'=='", "'!='", "'+'", "'-'", "'*'", "'/'", 
      "'%'", "'^'", "'<'", "'<='", "'>'", "'>='", "'::'", "'=>'", "", "'_d'"
    },
    std::vector<std::string>{
      "", "CONCEPT", "FUNCTION", "NAMESPACE", "LET", "NAME", "DESCRIPTION", 
      "GENERICIMPL", "REQUIRES", "TIME", "SPACE", "LANG", "QUOTE", "EVAL", 
      "LBRACE", "RBRACE", "LPAREN", "RPAREN", "COLON", "QUESTION_MARK", 
      "SEMI", "AMP", "ARROW", "COMMA", "ASSIGN", "EQUAL", "NOT_EQUAL", "PLUS", 
      "MINUS", "MUL", "DIV", "MOD", "POW", "LT", "LESS_EQUAL", "GT", "GREATER_EQUAL", 
      "DOUBLE_COLON", "LAMBDA_ARROW", "OPEN_BINDING", "DYNAMIC_ANNOTATOR", 
      "REAL", "BOOL", "INTEGER", "STRING", "IDENTIFIER", "WHITESPACE", "COMMENT", 
      "LINE_COMMENT", "OTHER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,49,357,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
  	1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
  	1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
  	1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
  	1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,
  	1,37,1,37,1,37,1,38,1,38,1,38,5,38,247,8,38,10,38,12,38,250,9,38,1,39,
  	1,39,1,39,1,40,1,40,1,40,4,40,258,8,40,11,40,12,40,259,1,40,1,40,5,40,
  	264,8,40,10,40,12,40,267,9,40,1,40,1,40,4,40,271,8,40,11,40,12,40,272,
  	3,40,275,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,286,8,
  	41,1,42,1,42,5,42,290,8,42,10,42,12,42,293,9,42,1,42,1,42,1,42,1,42,5,
  	42,299,8,42,10,42,12,42,302,9,42,1,42,1,42,3,42,306,8,42,1,43,1,43,5,
  	43,310,8,43,10,43,12,43,313,9,43,1,43,1,43,1,44,1,44,5,44,319,8,44,10,
  	44,12,44,322,9,44,1,45,4,45,325,8,45,11,45,12,45,326,1,45,1,45,1,46,1,
  	46,1,46,1,46,5,46,335,8,46,10,46,12,46,338,9,46,1,46,1,46,1,46,1,46,1,
  	46,1,47,1,47,1,47,1,47,5,47,349,8,47,10,47,12,47,352,9,47,1,47,1,47,1,
  	48,1,48,1,336,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
  	23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
  	23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
  	69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
  	46,93,47,95,48,97,49,1,0,7,1,0,49,57,1,0,48,57,1,0,34,34,3,0,65,90,95,
  	95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,
  	13,13,372,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
  	0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
  	0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
  	1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
  	0,0,0,97,1,0,0,0,1,99,1,0,0,0,3,107,1,0,0,0,5,111,1,0,0,0,7,121,1,0,0,
  	0,9,125,1,0,0,0,11,130,1,0,0,0,13,142,1,0,0,0,15,150,1,0,0,0,17,159,1,
  	0,0,0,19,164,1,0,0,0,21,170,1,0,0,0,23,175,1,0,0,0,25,181,1,0,0,0,27,
  	186,1,0,0,0,29,188,1,0,0,0,31,190,1,0,0,0,33,192,1,0,0,0,35,194,1,0,0,
  	0,37,196,1,0,0,0,39,198,1,0,0,0,41,200,1,0,0,0,43,202,1,0,0,0,45,205,
  	1,0,0,0,47,207,1,0,0,0,49,209,1,0,0,0,51,212,1,0,0,0,53,215,1,0,0,0,55,
  	217,1,0,0,0,57,219,1,0,0,0,59,221,1,0,0,0,61,223,1,0,0,0,63,225,1,0,0,
  	0,65,227,1,0,0,0,67,229,1,0,0,0,69,232,1,0,0,0,71,234,1,0,0,0,73,237,
  	1,0,0,0,75,240,1,0,0,0,77,243,1,0,0,0,79,251,1,0,0,0,81,274,1,0,0,0,83,
  	285,1,0,0,0,85,305,1,0,0,0,87,307,1,0,0,0,89,316,1,0,0,0,91,324,1,0,0,
  	0,93,330,1,0,0,0,95,344,1,0,0,0,97,355,1,0,0,0,99,100,5,99,0,0,100,101,
  	5,111,0,0,101,102,5,110,0,0,102,103,5,99,0,0,103,104,5,101,0,0,104,105,
  	5,112,0,0,105,106,5,116,0,0,106,2,1,0,0,0,107,108,5,102,0,0,108,109,5,
  	117,0,0,109,110,5,110,0,0,110,4,1,0,0,0,111,112,5,110,0,0,112,113,5,97,
  	0,0,113,114,5,109,0,0,114,115,5,101,0,0,115,116,5,115,0,0,116,117,5,112,
  	0,0,117,118,5,97,0,0,118,119,5,99,0,0,119,120,5,101,0,0,120,6,1,0,0,0,
  	121,122,5,108,0,0,122,123,5,101,0,0,123,124,5,116,0,0,124,8,1,0,0,0,125,
  	126,5,110,0,0,126,127,5,97,0,0,127,128,5,109,0,0,128,129,5,101,0,0,129,
  	10,1,0,0,0,130,131,5,100,0,0,131,132,5,101,0,0,132,133,5,115,0,0,133,
  	134,5,99,0,0,134,135,5,114,0,0,135,136,5,105,0,0,136,137,5,112,0,0,137,
  	138,5,116,0,0,138,139,5,105,0,0,139,140,5,111,0,0,140,141,5,110,0,0,141,
  	12,1,0,0,0,142,143,5,103,0,0,143,144,5,101,0,0,144,145,5,110,0,0,145,
  	146,5,101,0,0,146,147,5,114,0,0,147,148,5,105,0,0,148,149,5,99,0,0,149,
  	14,1,0,0,0,150,151,5,114,0,0,151,152,5,101,0,0,152,153,5,113,0,0,153,
  	154,5,117,0,0,154,155,5,105,0,0,155,156,5,114,0,0,156,157,5,101,0,0,157,
  	158,5,115,0,0,158,16,1,0,0,0,159,160,5,116,0,0,160,161,5,105,0,0,161,
  	162,5,109,0,0,162,163,5,101,0,0,163,18,1,0,0,0,164,165,5,115,0,0,165,
  	166,5,112,0,0,166,167,5,97,0,0,167,168,5,99,0,0,168,169,5,101,0,0,169,
  	20,1,0,0,0,170,171,5,108,0,0,171,172,5,97,0,0,172,173,5,110,0,0,173,174,
  	5,103,0,0,174,22,1,0,0,0,175,176,5,113,0,0,176,177,5,117,0,0,177,178,
  	5,111,0,0,178,179,5,116,0,0,179,180,5,101,0,0,180,24,1,0,0,0,181,182,
  	5,101,0,0,182,183,5,118,0,0,183,184,5,97,0,0,184,185,5,108,0,0,185,26,
  	1,0,0,0,186,187,5,123,0,0,187,28,1,0,0,0,188,189,5,125,0,0,189,30,1,0,
  	0,0,190,191,5,40,0,0,191,32,1,0,0,0,192,193,5,41,0,0,193,34,1,0,0,0,194,
  	195,5,58,0,0,195,36,1,0,0,0,196,197,5,63,0,0,197,38,1,0,0,0,198,199,5,
  	59,0,0,199,40,1,0,0,0,200,201,5,38,0,0,201,42,1,0,0,0,202,203,5,45,0,
  	0,203,204,5,62,0,0,204,44,1,0,0,0,205,206,5,44,0,0,206,46,1,0,0,0,207,
  	208,5,61,0,0,208,48,1,0,0,0,209,210,5,61,0,0,210,211,5,61,0,0,211,50,
  	1,0,0,0,212,213,5,33,0,0,213,214,5,61,0,0,214,52,1,0,0,0,215,216,5,43,
  	0,0,216,54,1,0,0,0,217,218,5,45,0,0,218,56,1,0,0,0,219,220,5,42,0,0,220,
  	58,1,0,0,0,221,222,5,47,0,0,222,60,1,0,0,0,223,224,5,37,0,0,224,62,1,
  	0,0,0,225,226,5,94,0,0,226,64,1,0,0,0,227,228,5,60,0,0,228,66,1,0,0,0,
  	229,230,5,60,0,0,230,231,5,61,0,0,231,68,1,0,0,0,232,233,5,62,0,0,233,
  	70,1,0,0,0,234,235,5,62,0,0,235,236,5,61,0,0,236,72,1,0,0,0,237,238,5,
  	58,0,0,238,239,5,58,0,0,239,74,1,0,0,0,240,241,5,61,0,0,241,242,5,62,
  	0,0,242,76,1,0,0,0,243,244,5,95,0,0,244,248,7,0,0,0,245,247,7,1,0,0,246,
  	245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,78,1,
  	0,0,0,250,248,1,0,0,0,251,252,5,95,0,0,252,253,5,100,0,0,253,80,1,0,0,
  	0,254,255,5,48,0,0,255,257,5,46,0,0,256,258,7,1,0,0,257,256,1,0,0,0,258,
  	259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,275,1,0,0,0,261,265,7,
  	0,0,0,262,264,7,1,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,
  	265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,270,5,46,0,0,269,
  	271,7,1,0,0,270,269,1,0,0,0,271,272,1,0,0,0,272,270,1,0,0,0,272,273,1,
  	0,0,0,273,275,1,0,0,0,274,254,1,0,0,0,274,261,1,0,0,0,275,82,1,0,0,0,
  	276,277,5,116,0,0,277,278,5,114,0,0,278,279,5,117,0,0,279,286,5,101,0,
  	0,280,281,5,102,0,0,281,282,5,97,0,0,282,283,5,108,0,0,283,284,5,115,
  	0,0,284,286,5,101,0,0,285,276,1,0,0,0,285,280,1,0,0,0,286,84,1,0,0,0,
  	287,291,7,0,0,0,288,290,7,1,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,
  	1,0,0,0,291,292,1,0,0,0,292,306,1,0,0,0,293,291,1,0,0,0,294,306,5,48,
  	0,0,295,296,5,45,0,0,296,300,7,0,0,0,297,299,7,1,0,0,298,297,1,0,0,0,
  	299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,306,1,0,0,0,302,300,
  	1,0,0,0,303,304,5,45,0,0,304,306,5,48,0,0,305,287,1,0,0,0,305,294,1,0,
  	0,0,305,295,1,0,0,0,305,303,1,0,0,0,306,86,1,0,0,0,307,311,5,34,0,0,308,
  	310,8,2,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,
  	0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,5,34,0,0,315,88,1,0,0,0,
  	316,320,7,3,0,0,317,319,7,4,0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,
  	1,0,0,0,320,321,1,0,0,0,321,90,1,0,0,0,322,320,1,0,0,0,323,325,7,5,0,
  	0,324,323,1,0,0,0,325,326,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,
  	328,1,0,0,0,328,329,6,45,0,0,329,92,1,0,0,0,330,331,5,47,0,0,331,332,
  	5,42,0,0,332,336,1,0,0,0,333,335,9,0,0,0,334,333,1,0,0,0,335,338,1,0,
  	0,0,336,337,1,0,0,0,336,334,1,0,0,0,337,339,1,0,0,0,338,336,1,0,0,0,339,
  	340,5,42,0,0,340,341,5,47,0,0,341,342,1,0,0,0,342,343,6,46,1,0,343,94,
  	1,0,0,0,344,345,5,47,0,0,345,346,5,47,0,0,346,350,1,0,0,0,347,349,8,6,
  	0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,
  	353,1,0,0,0,352,350,1,0,0,0,353,354,6,47,1,0,354,96,1,0,0,0,355,356,9,
  	0,0,0,356,98,1,0,0,0,15,0,248,259,265,272,274,285,291,300,305,311,320,
  	326,336,350,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  conglexerLexerStaticData = std::move(staticData);
}

}

CongLexer::CongLexer(CharStream *input) : Lexer(input) {
  CongLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *conglexerLexerStaticData->atn, conglexerLexerStaticData->decisionToDFA, conglexerLexerStaticData->sharedContextCache);
}

CongLexer::~CongLexer() {
  delete _interpreter;
}

std::string CongLexer::getGrammarFileName() const {
  return "CongLexer.g4";
}

const std::vector<std::string>& CongLexer::getRuleNames() const {
  return conglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CongLexer::getChannelNames() const {
  return conglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CongLexer::getModeNames() const {
  return conglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CongLexer::getVocabulary() const {
  return conglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CongLexer::getSerializedATN() const {
  return conglexerLexerStaticData->serializedATN;
}

const atn::ATN& CongLexer::getATN() const {
  return *conglexerLexerStaticData->atn;
}




void CongLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  conglexerLexerInitialize();
#else
  ::antlr4::internal::call_once(conglexerLexerOnceFlag, conglexerLexerInitialize);
#endif
}
