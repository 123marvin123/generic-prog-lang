
// Generated from /Users/haschker/Arbeitsbereich/generic-prog-lang/grammar/CongLexer.g4 by ANTLR 4.13.2


#include "CongLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CongLexerStaticData final {
  CongLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CongLexerStaticData(const CongLexerStaticData&) = delete;
  CongLexerStaticData(CongLexerStaticData&&) = delete;
  CongLexerStaticData& operator=(const CongLexerStaticData&) = delete;
  CongLexerStaticData& operator=(CongLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag conglexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CongLexerStaticData> conglexerLexerStaticData = nullptr;

void conglexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (conglexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(conglexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CongLexerStaticData>(
    std::vector<std::string>{
      "CONCEPT", "FUNCTION", "NAMESPACE", "LET", "NAME", "DESCRIPTION", 
      "GENERICIMPL", "REQUIRES", "TIME", "SPACE", "LANG", "QUOTE", "EVAL", 
      "LBRACE", "RBRACE", "LPAREN", "RPAREN", "COLON", "QUESTION_MARK", 
      "SEMI", "AMP", "ARROW", "COMMA", "ASSIGN", "EQUAL", "NOT_EQUAL", "PLUS", 
      "MINUS", "MUL", "DIV", "MOD", "POW", "LT", "LESS_EQUAL", "GT", "GREATER_EQUAL", 
      "DOUBLE_COLON", "OPEN_BINDING", "DYNAMIC_ANNOTATOR", "REAL", "BOOL", 
      "INTEGER", "STRING", "IDENTIFIER", "WHITESPACE", "COMMENT", "LINE_COMMENT", 
      "OTHER"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'concept'", "'fun'", "'namespace'", "'let'", "'name'", "'description'", 
      "'generic'", "'requires'", "'time'", "'space'", "'lang'", "'quote'", 
      "'eval'", "'{'", "'}'", "'('", "')'", "':'", "'\\u003F'", "';'", "'&'", 
      "'->'", "','", "'='", "'=='", "'!='", "'+'", "'-'", "'*'", "'/'", 
      "'%'", "'^'", "'<'", "'<='", "'>'", "'>='", "'::'", "", "'_d'"
    },
    std::vector<std::string>{
      "", "CONCEPT", "FUNCTION", "NAMESPACE", "LET", "NAME", "DESCRIPTION", 
      "GENERICIMPL", "REQUIRES", "TIME", "SPACE", "LANG", "QUOTE", "EVAL", 
      "LBRACE", "RBRACE", "LPAREN", "RPAREN", "COLON", "QUESTION_MARK", 
      "SEMI", "AMP", "ARROW", "COMMA", "ASSIGN", "EQUAL", "NOT_EQUAL", "PLUS", 
      "MINUS", "MUL", "DIV", "MOD", "POW", "LT", "LESS_EQUAL", "GT", "GREATER_EQUAL", 
      "DOUBLE_COLON", "OPEN_BINDING", "DYNAMIC_ANNOTATOR", "REAL", "BOOL", 
      "INTEGER", "STRING", "IDENTIFIER", "WHITESPACE", "COMMENT", "LINE_COMMENT", 
      "OTHER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,48,352,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
  	1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
  	1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
  	1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
  	1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
  	1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
  	1,37,5,37,242,8,37,10,37,12,37,245,9,37,1,38,1,38,1,38,1,39,1,39,1,39,
  	4,39,253,8,39,11,39,12,39,254,1,39,1,39,5,39,259,8,39,10,39,12,39,262,
  	9,39,1,39,1,39,4,39,266,8,39,11,39,12,39,267,3,39,270,8,39,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,281,8,40,1,41,1,41,5,41,285,8,
  	41,10,41,12,41,288,9,41,1,41,1,41,1,41,1,41,5,41,294,8,41,10,41,12,41,
  	297,9,41,1,41,1,41,3,41,301,8,41,1,42,1,42,5,42,305,8,42,10,42,12,42,
  	308,9,42,1,42,1,42,1,43,1,43,5,43,314,8,43,10,43,12,43,317,9,43,1,44,
  	4,44,320,8,44,11,44,12,44,321,1,44,1,44,1,45,1,45,1,45,1,45,5,45,330,
  	8,45,10,45,12,45,333,9,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
  	5,46,344,8,46,10,46,12,46,347,9,46,1,46,1,46,1,47,1,47,1,331,0,48,1,1,
  	3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
  	15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
  	53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
  	38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,1,0,7,
  	1,0,49,57,1,0,48,57,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
  	95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,367,0,1,1,0,0,0,0,3,
  	1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
  	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
  	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
  	0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
  	0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
  	1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
  	0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
  	0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
  	1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,105,1,0,
  	0,0,5,109,1,0,0,0,7,119,1,0,0,0,9,123,1,0,0,0,11,128,1,0,0,0,13,140,1,
  	0,0,0,15,148,1,0,0,0,17,157,1,0,0,0,19,162,1,0,0,0,21,168,1,0,0,0,23,
  	173,1,0,0,0,25,179,1,0,0,0,27,184,1,0,0,0,29,186,1,0,0,0,31,188,1,0,0,
  	0,33,190,1,0,0,0,35,192,1,0,0,0,37,194,1,0,0,0,39,196,1,0,0,0,41,198,
  	1,0,0,0,43,200,1,0,0,0,45,203,1,0,0,0,47,205,1,0,0,0,49,207,1,0,0,0,51,
  	210,1,0,0,0,53,213,1,0,0,0,55,215,1,0,0,0,57,217,1,0,0,0,59,219,1,0,0,
  	0,61,221,1,0,0,0,63,223,1,0,0,0,65,225,1,0,0,0,67,227,1,0,0,0,69,230,
  	1,0,0,0,71,232,1,0,0,0,73,235,1,0,0,0,75,238,1,0,0,0,77,246,1,0,0,0,79,
  	269,1,0,0,0,81,280,1,0,0,0,83,300,1,0,0,0,85,302,1,0,0,0,87,311,1,0,0,
  	0,89,319,1,0,0,0,91,325,1,0,0,0,93,339,1,0,0,0,95,350,1,0,0,0,97,98,5,
  	99,0,0,98,99,5,111,0,0,99,100,5,110,0,0,100,101,5,99,0,0,101,102,5,101,
  	0,0,102,103,5,112,0,0,103,104,5,116,0,0,104,2,1,0,0,0,105,106,5,102,0,
  	0,106,107,5,117,0,0,107,108,5,110,0,0,108,4,1,0,0,0,109,110,5,110,0,0,
  	110,111,5,97,0,0,111,112,5,109,0,0,112,113,5,101,0,0,113,114,5,115,0,
  	0,114,115,5,112,0,0,115,116,5,97,0,0,116,117,5,99,0,0,117,118,5,101,0,
  	0,118,6,1,0,0,0,119,120,5,108,0,0,120,121,5,101,0,0,121,122,5,116,0,0,
  	122,8,1,0,0,0,123,124,5,110,0,0,124,125,5,97,0,0,125,126,5,109,0,0,126,
  	127,5,101,0,0,127,10,1,0,0,0,128,129,5,100,0,0,129,130,5,101,0,0,130,
  	131,5,115,0,0,131,132,5,99,0,0,132,133,5,114,0,0,133,134,5,105,0,0,134,
  	135,5,112,0,0,135,136,5,116,0,0,136,137,5,105,0,0,137,138,5,111,0,0,138,
  	139,5,110,0,0,139,12,1,0,0,0,140,141,5,103,0,0,141,142,5,101,0,0,142,
  	143,5,110,0,0,143,144,5,101,0,0,144,145,5,114,0,0,145,146,5,105,0,0,146,
  	147,5,99,0,0,147,14,1,0,0,0,148,149,5,114,0,0,149,150,5,101,0,0,150,151,
  	5,113,0,0,151,152,5,117,0,0,152,153,5,105,0,0,153,154,5,114,0,0,154,155,
  	5,101,0,0,155,156,5,115,0,0,156,16,1,0,0,0,157,158,5,116,0,0,158,159,
  	5,105,0,0,159,160,5,109,0,0,160,161,5,101,0,0,161,18,1,0,0,0,162,163,
  	5,115,0,0,163,164,5,112,0,0,164,165,5,97,0,0,165,166,5,99,0,0,166,167,
  	5,101,0,0,167,20,1,0,0,0,168,169,5,108,0,0,169,170,5,97,0,0,170,171,5,
  	110,0,0,171,172,5,103,0,0,172,22,1,0,0,0,173,174,5,113,0,0,174,175,5,
  	117,0,0,175,176,5,111,0,0,176,177,5,116,0,0,177,178,5,101,0,0,178,24,
  	1,0,0,0,179,180,5,101,0,0,180,181,5,118,0,0,181,182,5,97,0,0,182,183,
  	5,108,0,0,183,26,1,0,0,0,184,185,5,123,0,0,185,28,1,0,0,0,186,187,5,125,
  	0,0,187,30,1,0,0,0,188,189,5,40,0,0,189,32,1,0,0,0,190,191,5,41,0,0,191,
  	34,1,0,0,0,192,193,5,58,0,0,193,36,1,0,0,0,194,195,5,63,0,0,195,38,1,
  	0,0,0,196,197,5,59,0,0,197,40,1,0,0,0,198,199,5,38,0,0,199,42,1,0,0,0,
  	200,201,5,45,0,0,201,202,5,62,0,0,202,44,1,0,0,0,203,204,5,44,0,0,204,
  	46,1,0,0,0,205,206,5,61,0,0,206,48,1,0,0,0,207,208,5,61,0,0,208,209,5,
  	61,0,0,209,50,1,0,0,0,210,211,5,33,0,0,211,212,5,61,0,0,212,52,1,0,0,
  	0,213,214,5,43,0,0,214,54,1,0,0,0,215,216,5,45,0,0,216,56,1,0,0,0,217,
  	218,5,42,0,0,218,58,1,0,0,0,219,220,5,47,0,0,220,60,1,0,0,0,221,222,5,
  	37,0,0,222,62,1,0,0,0,223,224,5,94,0,0,224,64,1,0,0,0,225,226,5,60,0,
  	0,226,66,1,0,0,0,227,228,5,60,0,0,228,229,5,61,0,0,229,68,1,0,0,0,230,
  	231,5,62,0,0,231,70,1,0,0,0,232,233,5,62,0,0,233,234,5,61,0,0,234,72,
  	1,0,0,0,235,236,5,58,0,0,236,237,5,58,0,0,237,74,1,0,0,0,238,239,5,95,
  	0,0,239,243,7,0,0,0,240,242,7,1,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,
  	241,1,0,0,0,243,244,1,0,0,0,244,76,1,0,0,0,245,243,1,0,0,0,246,247,5,
  	95,0,0,247,248,5,100,0,0,248,78,1,0,0,0,249,250,5,48,0,0,250,252,5,46,
  	0,0,251,253,7,1,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,
  	255,1,0,0,0,255,270,1,0,0,0,256,260,7,0,0,0,257,259,7,1,0,0,258,257,1,
  	0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,263,1,0,0,0,
  	262,260,1,0,0,0,263,265,5,46,0,0,264,266,7,1,0,0,265,264,1,0,0,0,266,
  	267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,249,1,
  	0,0,0,269,256,1,0,0,0,270,80,1,0,0,0,271,272,5,116,0,0,272,273,5,114,
  	0,0,273,274,5,117,0,0,274,281,5,101,0,0,275,276,5,102,0,0,276,277,5,97,
  	0,0,277,278,5,108,0,0,278,279,5,115,0,0,279,281,5,101,0,0,280,271,1,0,
  	0,0,280,275,1,0,0,0,281,82,1,0,0,0,282,286,7,0,0,0,283,285,7,1,0,0,284,
  	283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,301,1,
  	0,0,0,288,286,1,0,0,0,289,301,5,48,0,0,290,291,5,45,0,0,291,295,7,0,0,
  	0,292,294,7,1,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,
  	296,1,0,0,0,296,301,1,0,0,0,297,295,1,0,0,0,298,299,5,45,0,0,299,301,
  	5,48,0,0,300,282,1,0,0,0,300,289,1,0,0,0,300,290,1,0,0,0,300,298,1,0,
  	0,0,301,84,1,0,0,0,302,306,5,34,0,0,303,305,8,2,0,0,304,303,1,0,0,0,305,
  	308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,306,1,
  	0,0,0,309,310,5,34,0,0,310,86,1,0,0,0,311,315,7,3,0,0,312,314,7,4,0,0,
  	313,312,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,88,
  	1,0,0,0,317,315,1,0,0,0,318,320,7,5,0,0,319,318,1,0,0,0,320,321,1,0,0,
  	0,321,319,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,6,44,0,0,324,
  	90,1,0,0,0,325,326,5,47,0,0,326,327,5,42,0,0,327,331,1,0,0,0,328,330,
  	9,0,0,0,329,328,1,0,0,0,330,333,1,0,0,0,331,332,1,0,0,0,331,329,1,0,0,
  	0,332,334,1,0,0,0,333,331,1,0,0,0,334,335,5,42,0,0,335,336,5,47,0,0,336,
  	337,1,0,0,0,337,338,6,45,1,0,338,92,1,0,0,0,339,340,5,47,0,0,340,341,
  	5,47,0,0,341,345,1,0,0,0,342,344,8,6,0,0,343,342,1,0,0,0,344,347,1,0,
  	0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,348,
  	349,6,46,1,0,349,94,1,0,0,0,350,351,9,0,0,0,351,96,1,0,0,0,15,0,243,254,
  	260,267,269,280,286,295,300,306,315,321,331,345,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  conglexerLexerStaticData = std::move(staticData);
}

}

CongLexer::CongLexer(CharStream *input) : Lexer(input) {
  CongLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *conglexerLexerStaticData->atn, conglexerLexerStaticData->decisionToDFA, conglexerLexerStaticData->sharedContextCache);
}

CongLexer::~CongLexer() {
  delete _interpreter;
}

std::string CongLexer::getGrammarFileName() const {
  return "CongLexer.g4";
}

const std::vector<std::string>& CongLexer::getRuleNames() const {
  return conglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CongLexer::getChannelNames() const {
  return conglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CongLexer::getModeNames() const {
  return conglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CongLexer::getVocabulary() const {
  return conglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CongLexer::getSerializedATN() const {
  return conglexerLexerStaticData->serializedATN;
}

const atn::ATN& CongLexer::getATN() const {
  return *conglexerLexerStaticData->atn;
}




void CongLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  conglexerLexerInitialize();
#else
  ::antlr4::internal::call_once(conglexerLexerOnceFlag, conglexerLexerInitialize);
#endif
}
