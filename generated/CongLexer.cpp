
// Generated from /Users/haschker/Arbeitsbereich/generic-prog-lang/grammar/CongLexer.g4 by ANTLR 4.13.2


#include "CongLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CongLexerStaticData final {
  CongLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CongLexerStaticData(const CongLexerStaticData&) = delete;
  CongLexerStaticData(CongLexerStaticData&&) = delete;
  CongLexerStaticData& operator=(const CongLexerStaticData&) = delete;
  CongLexerStaticData& operator=(CongLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag conglexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CongLexerStaticData> conglexerLexerStaticData = nullptr;

void conglexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (conglexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(conglexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CongLexerStaticData>(
    std::vector<std::string>{
      "CONCEPT", "FUNCTION", "NAMESPACE", "LET", "NAME", "DESCRIPTION", 
      "GENERICIMPL", "REQUIRES", "TIME", "SPACE", "LANG", "QUOTE", "EVAL", 
      "LBRACE", "RBRACE", "VARARGS", "LPAREN", "RPAREN", "COLON", "SEMI", 
      "AMP", "ARROW", "COMMA", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
      "MOD", "POW", "LT", "GT", "DOUBLE_COLON", "OPEN_BINDING", "DYNAMIC_ANNOTATOR", 
      "REAL", "BOOL", "INTEGER", "STRING", "IDENTIFIER", "WHITESPACE", "COMMENT", 
      "LINE_COMMENT", "OTHER"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'concept'", "'fun'", "'namespace'", "'let'", "'name'", "'description'", 
      "'generic'", "'requires'", "'time'", "'space'", "'lang'", "'quote'", 
      "'eval'", "'{'", "'}'", "'...'", "'('", "')'", "':'", "';'", "'&'", 
      "'->'", "','", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'<'", 
      "'>'", "'::'", "", "'_d'"
    },
    std::vector<std::string>{
      "", "CONCEPT", "FUNCTION", "NAMESPACE", "LET", "NAME", "DESCRIPTION", 
      "GENERICIMPL", "REQUIRES", "TIME", "SPACE", "LANG", "QUOTE", "EVAL", 
      "LBRACE", "RBRACE", "VARARGS", "LPAREN", "RPAREN", "COLON", "SEMI", 
      "AMP", "ARROW", "COMMA", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
      "MOD", "POW", "LT", "GT", "DOUBLE_COLON", "OPEN_BINDING", "DYNAMIC_ANNOTATOR", 
      "REAL", "BOOL", "INTEGER", "STRING", "IDENTIFIER", "WHITESPACE", "COMMENT", 
      "LINE_COMMENT", "OTHER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,44,334,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
  	1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,
  	1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,
  	1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,
  	1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
  	1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,5,33,224,8,33,
  	10,33,12,33,227,9,33,1,34,1,34,1,34,1,35,1,35,1,35,4,35,235,8,35,11,35,
  	12,35,236,1,35,1,35,5,35,241,8,35,10,35,12,35,244,9,35,1,35,1,35,4,35,
  	248,8,35,11,35,12,35,249,3,35,252,8,35,1,36,1,36,1,36,1,36,1,36,1,36,
  	1,36,1,36,1,36,3,36,263,8,36,1,37,1,37,5,37,267,8,37,10,37,12,37,270,
  	9,37,1,37,1,37,1,37,1,37,5,37,276,8,37,10,37,12,37,279,9,37,1,37,1,37,
  	3,37,283,8,37,1,38,1,38,5,38,287,8,38,10,38,12,38,290,9,38,1,38,1,38,
  	1,39,1,39,5,39,296,8,39,10,39,12,39,299,9,39,1,40,4,40,302,8,40,11,40,
  	12,40,303,1,40,1,40,1,41,1,41,1,41,1,41,5,41,312,8,41,10,41,12,41,315,
  	9,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,326,8,42,10,42,
  	12,42,329,9,42,1,42,1,42,1,43,1,43,1,313,0,44,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,42,85,43,87,44,1,0,7,1,0,49,57,1,0,48,57,1,0,34,34,3,0,65,90,95,95,
  	97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,
  	13,349,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
  	11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
  	0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
  	0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
  	43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
  	0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
  	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
  	75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
  	0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,97,1,0,0,0,5,101,1,0,0,0,7,111,1,0,
  	0,0,9,115,1,0,0,0,11,120,1,0,0,0,13,132,1,0,0,0,15,140,1,0,0,0,17,149,
  	1,0,0,0,19,154,1,0,0,0,21,160,1,0,0,0,23,165,1,0,0,0,25,171,1,0,0,0,27,
  	176,1,0,0,0,29,178,1,0,0,0,31,180,1,0,0,0,33,184,1,0,0,0,35,186,1,0,0,
  	0,37,188,1,0,0,0,39,190,1,0,0,0,41,192,1,0,0,0,43,194,1,0,0,0,45,197,
  	1,0,0,0,47,199,1,0,0,0,49,201,1,0,0,0,51,203,1,0,0,0,53,205,1,0,0,0,55,
  	207,1,0,0,0,57,209,1,0,0,0,59,211,1,0,0,0,61,213,1,0,0,0,63,215,1,0,0,
  	0,65,217,1,0,0,0,67,220,1,0,0,0,69,228,1,0,0,0,71,251,1,0,0,0,73,262,
  	1,0,0,0,75,282,1,0,0,0,77,284,1,0,0,0,79,293,1,0,0,0,81,301,1,0,0,0,83,
  	307,1,0,0,0,85,321,1,0,0,0,87,332,1,0,0,0,89,90,5,99,0,0,90,91,5,111,
  	0,0,91,92,5,110,0,0,92,93,5,99,0,0,93,94,5,101,0,0,94,95,5,112,0,0,95,
  	96,5,116,0,0,96,2,1,0,0,0,97,98,5,102,0,0,98,99,5,117,0,0,99,100,5,110,
  	0,0,100,4,1,0,0,0,101,102,5,110,0,0,102,103,5,97,0,0,103,104,5,109,0,
  	0,104,105,5,101,0,0,105,106,5,115,0,0,106,107,5,112,0,0,107,108,5,97,
  	0,0,108,109,5,99,0,0,109,110,5,101,0,0,110,6,1,0,0,0,111,112,5,108,0,
  	0,112,113,5,101,0,0,113,114,5,116,0,0,114,8,1,0,0,0,115,116,5,110,0,0,
  	116,117,5,97,0,0,117,118,5,109,0,0,118,119,5,101,0,0,119,10,1,0,0,0,120,
  	121,5,100,0,0,121,122,5,101,0,0,122,123,5,115,0,0,123,124,5,99,0,0,124,
  	125,5,114,0,0,125,126,5,105,0,0,126,127,5,112,0,0,127,128,5,116,0,0,128,
  	129,5,105,0,0,129,130,5,111,0,0,130,131,5,110,0,0,131,12,1,0,0,0,132,
  	133,5,103,0,0,133,134,5,101,0,0,134,135,5,110,0,0,135,136,5,101,0,0,136,
  	137,5,114,0,0,137,138,5,105,0,0,138,139,5,99,0,0,139,14,1,0,0,0,140,141,
  	5,114,0,0,141,142,5,101,0,0,142,143,5,113,0,0,143,144,5,117,0,0,144,145,
  	5,105,0,0,145,146,5,114,0,0,146,147,5,101,0,0,147,148,5,115,0,0,148,16,
  	1,0,0,0,149,150,5,116,0,0,150,151,5,105,0,0,151,152,5,109,0,0,152,153,
  	5,101,0,0,153,18,1,0,0,0,154,155,5,115,0,0,155,156,5,112,0,0,156,157,
  	5,97,0,0,157,158,5,99,0,0,158,159,5,101,0,0,159,20,1,0,0,0,160,161,5,
  	108,0,0,161,162,5,97,0,0,162,163,5,110,0,0,163,164,5,103,0,0,164,22,1,
  	0,0,0,165,166,5,113,0,0,166,167,5,117,0,0,167,168,5,111,0,0,168,169,5,
  	116,0,0,169,170,5,101,0,0,170,24,1,0,0,0,171,172,5,101,0,0,172,173,5,
  	118,0,0,173,174,5,97,0,0,174,175,5,108,0,0,175,26,1,0,0,0,176,177,5,123,
  	0,0,177,28,1,0,0,0,178,179,5,125,0,0,179,30,1,0,0,0,180,181,5,46,0,0,
  	181,182,5,46,0,0,182,183,5,46,0,0,183,32,1,0,0,0,184,185,5,40,0,0,185,
  	34,1,0,0,0,186,187,5,41,0,0,187,36,1,0,0,0,188,189,5,58,0,0,189,38,1,
  	0,0,0,190,191,5,59,0,0,191,40,1,0,0,0,192,193,5,38,0,0,193,42,1,0,0,0,
  	194,195,5,45,0,0,195,196,5,62,0,0,196,44,1,0,0,0,197,198,5,44,0,0,198,
  	46,1,0,0,0,199,200,5,61,0,0,200,48,1,0,0,0,201,202,5,43,0,0,202,50,1,
  	0,0,0,203,204,5,45,0,0,204,52,1,0,0,0,205,206,5,42,0,0,206,54,1,0,0,0,
  	207,208,5,47,0,0,208,56,1,0,0,0,209,210,5,37,0,0,210,58,1,0,0,0,211,212,
  	5,94,0,0,212,60,1,0,0,0,213,214,5,60,0,0,214,62,1,0,0,0,215,216,5,62,
  	0,0,216,64,1,0,0,0,217,218,5,58,0,0,218,219,5,58,0,0,219,66,1,0,0,0,220,
  	221,5,95,0,0,221,225,7,0,0,0,222,224,7,1,0,0,223,222,1,0,0,0,224,227,
  	1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,68,1,0,0,0,227,225,1,0,0,
  	0,228,229,5,95,0,0,229,230,5,100,0,0,230,70,1,0,0,0,231,232,5,48,0,0,
  	232,234,5,46,0,0,233,235,7,1,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,
  	234,1,0,0,0,236,237,1,0,0,0,237,252,1,0,0,0,238,242,7,0,0,0,239,241,7,
  	1,0,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,
  	243,245,1,0,0,0,244,242,1,0,0,0,245,247,5,46,0,0,246,248,7,1,0,0,247,
  	246,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,1,
  	0,0,0,251,231,1,0,0,0,251,238,1,0,0,0,252,72,1,0,0,0,253,254,5,116,0,
  	0,254,255,5,114,0,0,255,256,5,117,0,0,256,263,5,101,0,0,257,258,5,102,
  	0,0,258,259,5,97,0,0,259,260,5,108,0,0,260,261,5,115,0,0,261,263,5,101,
  	0,0,262,253,1,0,0,0,262,257,1,0,0,0,263,74,1,0,0,0,264,268,7,0,0,0,265,
  	267,7,1,0,0,266,265,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,
  	0,0,0,269,283,1,0,0,0,270,268,1,0,0,0,271,283,5,48,0,0,272,273,5,45,0,
  	0,273,277,7,0,0,0,274,276,7,1,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,
  	275,1,0,0,0,277,278,1,0,0,0,278,283,1,0,0,0,279,277,1,0,0,0,280,281,5,
  	45,0,0,281,283,5,48,0,0,282,264,1,0,0,0,282,271,1,0,0,0,282,272,1,0,0,
  	0,282,280,1,0,0,0,283,76,1,0,0,0,284,288,5,34,0,0,285,287,8,2,0,0,286,
  	285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,
  	0,0,0,290,288,1,0,0,0,291,292,5,34,0,0,292,78,1,0,0,0,293,297,7,3,0,0,
  	294,296,7,4,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,
  	1,0,0,0,298,80,1,0,0,0,299,297,1,0,0,0,300,302,7,5,0,0,301,300,1,0,0,
  	0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,
  	306,6,40,0,0,306,82,1,0,0,0,307,308,5,47,0,0,308,309,5,42,0,0,309,313,
  	1,0,0,0,310,312,9,0,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,314,1,0,0,
  	0,313,311,1,0,0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,317,5,42,0,0,317,
  	318,5,47,0,0,318,319,1,0,0,0,319,320,6,41,1,0,320,84,1,0,0,0,321,322,
  	5,47,0,0,322,323,5,47,0,0,323,327,1,0,0,0,324,326,8,6,0,0,325,324,1,0,
  	0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,
  	327,1,0,0,0,330,331,6,42,1,0,331,86,1,0,0,0,332,333,9,0,0,0,333,88,1,
  	0,0,0,15,0,225,236,242,249,251,262,268,277,282,288,297,303,313,327,2,
  	6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  conglexerLexerStaticData = std::move(staticData);
}

}

CongLexer::CongLexer(CharStream *input) : Lexer(input) {
  CongLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *conglexerLexerStaticData->atn, conglexerLexerStaticData->decisionToDFA, conglexerLexerStaticData->sharedContextCache);
}

CongLexer::~CongLexer() {
  delete _interpreter;
}

std::string CongLexer::getGrammarFileName() const {
  return "CongLexer.g4";
}

const std::vector<std::string>& CongLexer::getRuleNames() const {
  return conglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CongLexer::getChannelNames() const {
  return conglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CongLexer::getModeNames() const {
  return conglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CongLexer::getVocabulary() const {
  return conglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CongLexer::getSerializedATN() const {
  return conglexerLexerStaticData->serializedATN;
}

const atn::ATN& CongLexer::getATN() const {
  return *conglexerLexerStaticData->atn;
}




void CongLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  conglexerLexerInitialize();
#else
  ::antlr4::internal::call_once(conglexerLexerOnceFlag, conglexerLexerInitialize);
#endif
}
