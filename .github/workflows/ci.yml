---
name: CI

on:
  push:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  lint-hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: "./Dockerfile"

  lint-json:
    name: JSON Lint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run JQ
        run: |
          shopt -s globstar
          cat **/*.json | jq '.'

  lint-markdown:
    name: MarkdownLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run mdl
        uses: actionshub/markdownlint@v3.1.4

  lint-shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Shellcheck
        uses: ludeeus/action-shellcheck@2.0.0
        env:
          SHELLCHECK_OPTS: -s bash

  lint-yamllint:
    name: YAMLLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run YAMLLint
        uses: frenck/action-yamllint@v1.5

  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      - name: üöÄ Build
        uses: docker/build-push-action@v6.15.0
        with:
          push: true
          file: Dockerfile
          cache-from: type=gha,scope=${{ github.repository }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}
          tags: ghcr.io/${{ github.repository }}:dev

  compile:
    name: Compile C++
    needs:
      - build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: build
          # Create a cache key based on the OS and the hash of CMakeLists.txt
          key: ${{ runner.os }}-build-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Run the build process with Docker
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/${{ github.repository }}:dev
          options: -v ${{ github.workspace }}:/app -w /app
          run: |
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Debug
            cmake --build .

  test:
    name: Run C++ Tests
    needs:
      - compile
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: build
          # Create a cache key based on the OS and the hash of CMakeLists.txt
          key: ${{ runner.os }}-build-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Run the build process with Docker
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/${{ github.repository }}:dev
          options: -v ${{ github.workspace }}:/app -w /app
          run: |
            cd build
            ctest --output-on-failure
