namespace Graph {
    concept Graph (description: "graph") : Object::Object;

    fun setOfVertexKey(p1: Graph, p2: Boolean::Boolean, p3: Boolean::Boolean) -> Set::Set {
        description { "set of all vertices of p(1), constrained to sources if p(2) is true and to targets if p(3) is true" }
    }

    fun setOfEdgeKey(p1: Graph) -> Set::Set {
        description { "set of all edges of p(1)" }
    }

    fun setOfEdgeKeyBetween(
        p1: Graph, p2: Object::Object,
        p3: Object::Object, p4: Boolean::Boolean,
        p5: Boolean::Boolean) -> Set::Set {
        description { "set of edges of p(1) between p(2) and p(3), constrained to edges from p(2) to p(3) if p(4) is true, and to edges from p(3) to p(2) if p(5) is true" }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p2) }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p3) }
    }

    fun setOfEdgeKeyInc(p1: Graph, p2: Object::Object, p3: Boolean::Boolean, p4: Boolean::Boolean) -> Set::Set {
        description { "set of edges of graph p(1) incident to vertex p(2), constrained to edges from p(2) if p(3) is true, and to edges to p(2) if p(4) is true" }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p2) }
    }

    fun setOfVertexKeyInc(p1: Graph, p2: Object::Object, p3: Boolean::Boolean, p4: Boolean::Boolean) -> Set::Set {
        description { "set of vertices incident to edge p(2) of graph p(1), constrained to sources if p(3) is true and to targets if p(4) is true" }
        requires { Set::hasElement(setOfEdgeKey(p1), p2) }
    }

    fun setOfVertexKeyAdj(p1: Graph, p2: Object::Object, p3: Boolean::Boolean, p4: Boolean::Boolean) -> Set::Set {
        description { "set of vertices of graph p(1) adjacent to vertex p(2), constrained to targets of edges from p(2) if p(3) is true, and to sources of edges to p(2) if p(4) is true" }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p2) }
    }

    fun degree(p1: Graph, p2: Object::Object, p3: Boolean::Boolean, p4: Boolean::Boolean) -> Number::Natural {
        description { "degree (number of incident edges) of vertex p(2) of graph p(1), considering undirect edges, and directed edges from p(2) if p(3) is true, and directed edges to p(2) if p(4) is true" }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p2) }
        //generic() { Set::card(setOfEdgeKeyInc(p1, p2, p3, p4)) }
    }

    fun isDirected(p1: Graph, p2: Object::Object) -> Boolean::Boolean {
        description { "is edge p(2) of graph p(1) directed?" }
        requires { Set::hasElement(setOfEdgeKey(p1), p2) }
    }

    fun isUndirected(p1: Graph, p2: Object::Object) -> Boolean::Boolean {
        description { "is edge p(2) of graph p(1) undirected?" }
        requires { Set::hasElement(setOfEdgeKey(p1), p2) }
        generic() { Boolean::not(isDirected(p1, p2)) }
    }

    fun isAllDirected(p1: Graph) -> Boolean::Boolean {
        description { "are all edges of graph p(1) directed?" }
    }

    fun isAllUndirected(p1: Graph) -> Boolean::Boolean {
        description { "are all edges of graph p(1) undirected?" }
    }

    fun isLoop(p1: Graph, p2: Object::Object) -> Boolean::Boolean {
        description { "is edge p(2) of graph p(1) a loop?" }
        requires { Set::hasElement(setOfEdgeKey(p1), p2) }
    }

    fun hasLoop(p1: Graph) -> Boolean::Boolean {
        description { "is any edge of graph p(1) a loop?" }
    }

    fun isSymmetric(p1: Graph, p2: Object::Object) -> Boolean::Boolean {
        description { "is edge p(2) of graph p(1) symmetric?" }
        requires { Set::hasElement(setOfEdgeKey(p1), p2) }
    }

    fun isAllSymmetric(p1: Graph) -> Boolean::Boolean {
        description { "are all edges of graph p(1) symmetric?" }
    }

    fun hasMultiEdge(p1: Graph) -> Boolean::Boolean {
        description { "are there different edges with the same source and target in graph p(1)?" }
    }

    fun isReflexive(p1: Graph, p2: Object::Object) -> Boolean::Boolean {
        description { "is edge p(2) of graph p(1) reflexive?" }
        requires { Set::hasElement(setOfEdgeKey(p1), p2) }
    }

    fun isSimple(p1: Graph) -> Boolean::Boolean {
        description { "is any edge of graph p(1) a loop or multiEdge?" }
    }

    fun insertVertex(p1: Graph, p2: Map::Map) -> Graph {
        description { "graph formed by extending p(1) by new vertex with weights as specified by p(2)" }
    }

    fun deleteVertex(p1: Graph, p2: Object::Object) -> Graph {
        description { "graph formed by deleting vertex p(2) from graph p(1)" }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p2) }
    }

    fun insertEdge(p1: Graph, p2: Object::Object, p3: Object::Object, p4: Map::Map) -> Graph {
        description { "graph formed by extending p(1) by new edge between vertices p(2) and p(3) in graph p(1), with weights as specified by p(4)" }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p2) }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p3) }
    }

    fun deleteEdge(p1: Graph, p2: Object::Object) -> Graph {
        description { "graph formed by deleting edge p(2) from graph p(1)" }
        requires { Set::hasElement(setOfEdgeKey(p1), p2) }
    }

    fun mapToMapOfVertexKey(p1: Graph) -> Map::Map {
        description { "" }
    }

    fun mapToMapOfEdgeKey(p1: Graph) -> Map::Map {
        description { "" }
    }

    fun mapToApplyForMapOfVertexKey(p1: Graph, p2: Object::Object, p3: Map::Map) -> Graph {
        description { "apply p(3) on map of vertex weight p(2) in p(1)" }
    }

    fun mapToApplyForMapOfEdgeKey(p1: Graph, p2: Object::Object, p3: Map::Map) -> Graph {
        description { "apply p(3) on map of edge weight p(2) in p(1)" }
    }

    fun insertMapOfVertexKey(p1: Graph, p2: Map::Map) -> Graph {
        description { "graph formed by extending p(1) by new weight with values per vertex as specified by p(2)" }
    }

    fun insertMapOfEdgeKey(p1: Graph, p2: Map::Map) -> Graph {
        description { "graph formed by extending p(1) by new weight with values per Edge as specified by p(2)" }
    }

    fun isPath(p1: Graph, p2: Seq::Seq) -> Boolean::Boolean {
        description { "checks if sequence p(2) is a path in graph p(1)" }
    }

    fun setOfPathShortest(p1: Graph, p2: Object::Object, p3: Object::Object, p4: Object::Object) -> Set::Set {
        description { "" }
        requires { Set::hasElement(Map::domain(mapToMapOfEdgeKey(p1)), p2) }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p3) }
        requires { Set::hasElement(setOfVertexKey(p1, false, false), p4) }
    }

    fun mapOfSourceKeyAndTargetKeyToSetOfPathShortest(p1: Graph, p2: Object::Object) -> Map::Map {
        description { "\\enquote{all shortest paths}" }
        requires { Set::hasElement(Map::domain(mapToMapOfEdgeKey(p1)), p2) }
    }

    fun minSpanningTree(p1: Graph) -> Tree::Tree {
        description { "minimal spanning tree of p(1)" }
    }

    fun isPartite(p1: Graph) -> Boolean::Boolean {
        description { "" }
        generic() { Set::isDisjoint(setOfVertexKey(p1, true, false), setOfVertexKey(p1, false, true)) }
    }
}