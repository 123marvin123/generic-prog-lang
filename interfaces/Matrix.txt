namespace Matrix {
    concept Matrix (description: "") : Object::Object;

    fun matrixForIdentity(p1: Number::Natural, p2: Number::Natural) -> Matrix {
        description { "identity matrix of p(1) rows and p(2) columns" }
    }

    fun matrixForSeqOfRow(p1: Seq::Seq) -> Matrix {
        description { "matrix of rows as given by the items of p(1)" }
        requires { Object::isModelOf(Seq::item(p1), Seq::emptySeq()) }
    }

    fun matrixForSeqOfCol(p1: Seq::Seq) -> Matrix {
        description { "matrix of columns as given by the items of p(1)" }
        requires { Object::isModelOf(Seq::item(p1), Seq::emptySeq()) }
    }

    fun matrixForGivens(
        p1: Number::Natural, p2: Number::Natural,
        p3: Number::Natural, p4: Number::Natural,
        p5: Number::Real) -> Matrix {
        description { "Givens matrix of p(1) rows and p(2) columns, rotating in p(3)/p(4) plane by angle p(5)" }
    }

    fun matrixForHouseholder(p1: Matrix) -> Matrix {
        description { "Householder matrix reflecting about hyperplane orthogonal to p(1)" }
        requires { Object::isEqual(lengthOfRow(p1), 1) }
    }

    fun multiSetOfEntry(p1: Matrix) -> Set::Set {
        description { "multi set of entries of p(1)" }
    }

    fun lengthOfRow(p1: Matrix) -> Number::Number {
        description { "length of rows (\\enquote{width}) of p(1)" }
        generic() { Seq::length(seqOfCol(p1)) }
    }

    fun lengthOfCol(p1: Matrix) -> Number::Number {
        description { "length of columns (\\enquote{height}) of p(1)" }
        generic() { Seq::length(seqOfRow(p1)) }
    }

    fun seqOfRow(p1: Matrix) -> Seq::Seq {
        description { "sequence of rows of p(1)" }
    }

    fun seqOfCol(p1: Matrix) -> Seq::Seq {
        description { "sequence of columns of p(1)" }
    }

    fun seqOfDiagAsc(p1: Matrix) -> Seq::Seq {
        description { "sequence of ascending diagonals of p(1), from upper left corner to lower right" }
    }

    fun seqOfDiagDesc(p1: Matrix) -> Seq::Seq {
        description { "sequence of descending diagonals of p(1), from lower left corner to upper right" }
    }

    fun entryAt(p1: Matrix, p2: Number::Natural, p3: Number::Natural) -> Object::Object {
        description { "entry of p(1) in row p(2) and column p(3)" }
    }

    fun subMatrix(p1: Matrix, p2: Seq::Selection, p3: Seq::Selection) -> Matrix {
        description { "sub-matrix of p(1) given by selections p(2) of row sequence and p(3) of column sequence" }
    }

    fun matrixAdd(p1: Matrix, p2: Matrix) -> Matrix {
        description { "sum of p(1) and p(2)" }
    }

    fun matrixMul(p1: Matrix, p2: Matrix) -> Matrix {
        description { "product of p(1) and p(2)" }
        requires { Object::isEqual(lengthOfRow(p1), lengthOfCol(p2)) }
    }

    fun squareRoot(p1: Matrix) -> Matrix {
        description { "square root of p(1)" }
    }

    fun crossProduct(p1: Matrix, p2: Matrix) -> Matrix {
        description { "cross product of p(1) and p(2)" }
        requires { Object::isEqual(lengthOfRow(p1), 1) }
        requires { Object::isEqual(lengthOfRow(p2), 1) }
    }

    fun trace(p1: Matrix) -> Number::Real {
        description { "trace of p(1)" }
    }

    fun determinant(p1: Matrix) -> Number::Real {
        description { "determinant of p(1)" }
    }

    fun rank(p1: Matrix) -> Number::Natural {
        description { "rank of p(1)" }
    }

    fun transpose(p1: Matrix) -> Matrix {
        description { "(conjugate) transpose of p(1)" }
    }

    fun singularValueDecomp(p1: Matrix) -> Seq::Seq {
        description { "singular value $U\\Sigma{}V^{*}$ decomposition of p(1)" }
    }

    fun seqOfSingularVal(p1: Matrix) -> Seq::Seq {
        description { "sequence of singular values of p(1)" }
    }

    fun eigenValueDecomp(p1: Matrix) -> Seq::Seq {
        description { "eigen value decomposition $Q\\Lambda{}Q^{-1}$ of p(1)" }
    }

    fun seqOfEigenVal(p1: Matrix) -> Seq::Seq {
        description { "sequence of eigen values of p(1)" }
    }

    fun lUDecomp(p1: Matrix) -> Seq::Seq {
        description { "lower-upper triangular decomposition $LU$ of p(1)" }
    }

    fun choleskyDecomp(p1: Matrix) -> Matrix {
        description { "matrix $L$ of Cholesky decomposition $LL^{T}$ of p(1)" }
    }

    fun qRDecomp(p1: Matrix) -> Seq::Seq {
        description { "QR decomposition $QR$ of p(1)" }
    }

    fun solve(p1: Matrix, p2: Matrix) -> Matrix {
        description { "solution of $p(1) \\cdot{} x = p(2)$" }
    }
}
