{% macro FunctionDefinition(def) %}

{% set reqs = function_requirements(def.full_name) %}
{% set impls = function_generic_impls(def.full_name) %}
{% set Name_ = sanitize(def.name) | title %}

class Spec{{ Name_ }}(FunctionSpecification):

{% set GenericLambdaParams = def.params | map(attribute='name') | map('sanitize') | join(', ') %}
    def __init__(self):
        super().__init__(
            "{{ sanitize(def.name) }}",
            """{{ def.description | replace('"', '\\"') }}""",
            [{%- for param in def.params -%}
                {%- if param.type == "placeholder_function_parameter" or param.type == "dependent_function_parameter" %}
ConceptObject.instance()
                {%- else %}
Concept{{ param.concept.name }}.instance()
                {%- endif %}{{', ' if loop.nextitem is defined }}
            {%- endfor -%}],
            Concept{{ sanitize(def.result.name) }}.instance(),
            [{% for impl in impls +%}
                GenericFunction(
                    lambda {{ GenericLambdaParams }}: {{ impl.exp }}{{ ', ' if ((impl.time_complexity | list | length) + (impl.space_complexity | list | length)) > 0 }}
                {% if impl.time_complexity | list | length > 0 %}
                    CostFun(lambda {{ GenericLambdaParams }}: {{ impl.time_complexity }}){{', ' if space_complexity | list | length > 0 }}
                {% endif %}
                {% if impl.space_complexity | list | length > 0 %}
                    CostFun(lambda {{ GenericLambdaParams }}: {{ impl.space_complexity }})
                {% endif %}
                )
                {%- if not loop.last %}, {% endif %}
            {% endfor +%}
            ]
        )

def {{ sanitize(def.name) }}(*args):
    return Bind(Function(Spec{{ Name_ }}()), *args)

{% endmacro %}