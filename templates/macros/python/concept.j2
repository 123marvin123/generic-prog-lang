{% macro ConceptDefinition(def) %}
{# --- Imports --- #}

{# TODO: Import base concepts based on def.bases #}
{% for base in def.bases %}
from {{ python_import_path(base) }} import Concept{{ sanitize(base.name) }}
{% endfor %}

from .cong.core.concept import Concept

class Concept{{ sanitize(def.name) }}(Concept):

    _instance = None

    def __init__(self):
        super().__init__(
            "{{ sanitize(def.name) }}", 
            """{{ def.description | replace('"', '\\"') }}""",
            [{%- for base in def.bases %}
Concept{{ sanitize(base.name) }}.instance(){% if not loop.last %},{% endif %}
            {% endfor -%}]
        )
    
    @classmethod
    def instance(cls):
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance

{% endmacro %}