{% from "macros/c++/namespace.j2" import NamespaceChain with context %}

{% macro FunctionDeclaration(def) %}
{% call NamespaceChain(def.ns) %}
{% set Name_ = sanitize(def.name) | title %}
{% set name_ = sanitize(def.name) %}

struct Dec{{ Name_ }} {
    using Params = ::cong::lang::core::Tuple<
    {%- for param in def.params -%}
        {%- if param.type == "placeholder_function_parameter" or param.type == "dependent_function_parameter" %}
{{ ConceptObject.ns | join('::') }}::Concept{{ ConceptObject.name }}
        {%- else %}
{{ param.concept.ns | join('::') }}::Concept{{ param.concept.name }}
        {%- endif %}{{', ' if loop.nextitem is defined }}
    {%- endfor -%}>;

    using ReturnConcept = {{ def.result.ns | join('::') }}::Concept{{ def.result.name }};

};

struct Spec{{ Name_ }};

template <typename... Exp_>
using {{ Name_ }} = ::cong::lang::Bind< 
    ::cong::lang::intern::Environment,
    ::cong::lang::intern::Exp<::cong::lang::intern::FunctionImpl<Dec{{ Name_ }}, Spec{{ Name_ }}>>,
    Exp_...
>;

template <typename... Exp_>
constexpr
{{ Name_ }}<Exp_...> {{ name_ }}(Exp_&&... args);

{% endcall %}
{% endmacro %}

{% macro FunctionDefinition(def) %}
{% call NamespaceChain(def.ns) %}
{% set Name_ = sanitize(def.name) | title %}
{% set name_ = sanitize(def.name) %}

struct Spec{{ Name_ }} {
    static constexpr auto name = "{{ name_ }}";
    static constexpr auto description = "{{def.description}}";

    template<class Index_>
    struct Requirement
    {
        using Present = cong::lang::core::False;
        template<class...>
        struct Call
        {
            using Type = cong::lang::core::Undefined;
            static constexpr Type call(...);
        };
    };

    template<class Index_>
    struct GenericImpl
    {
        using Present = cong::lang::core::False;
        template<typename...>
        struct Call 
        {
            using Type = cong::lang::core::Undefined;
            static constexpr Type call(...);
        };
    };

    using GenericImpls = cong::lang::core::Tuple<
    {% for impl in function_generic_impls(def.full_name) %}
        GenericImpl<cong::lang::core::NaturalStatic<{{ loop.index0 }}>>{%- if loop.last == false %}, {% endif %}
    {% endfor %}
    >;
};

{% for req in function_requirements(def.full_name) %}
/*
 * Requirement #{{ loop.index }}{{(' named ' ~ req.name) if req.name | length > 0}}:
 * {{ req.expression }}
*/
template<>
struct Spec{{ Name_ }}::Requirement<cong::lang::core::NaturalStatic<{{ loop.index0 }}>> {
    using Present = cong::lang::core::True;
    template<
    {%- for i in range(def.params | length) -%}
class Arg{{ i + 1 }}_{{' , ' if not loop.last }}
    {%- endfor -%}>
    struct Call
    {
        static constexpr auto call({%- for p in def.params -%}Arg{{ loop.index }}_&& {{ p.name }}{{' , ' if not loop.last }}{% endfor -%})
        {
            using ExpType_ = std::decay_t<decltype({{ req.expression }})>;
            const auto& result = [&]{ return {{ req.expression }}; };
            return cong::lang::intern::CondEval<
                        typename ::cong::lang::intern::IsExp::Call<ExpType_>::Type,
                        decltype(result),
                        ExpType_
                   >::call(result);
        }
        using Type = std::invoke_result_t<decltype(call), {% for p in def.params -%}Arg{{ loop.index }}_{{' , ' if not loop.last }}{% endfor -%}>;
    };
};{{' \n' if not loop.last }}{% endfor %} 

{% for impl in function_generic_impls(def.full_name) %}
/*
 * Generic Implementation #{{ loop.index }}:
 * {{ impl.expression }}
*/
template<>
struct Spec{{ Name_ }}::GenericImpl<cong::lang::core::NaturalStatic<{{ loop.index0 }}>>
{
    using Present = cong::lang::core::True;
    template<typename Exp_, typename TupleOfExp_>
    struct Call;

private:
    struct ApplyTime_ {
        template<typename Exp_, typename... Args>
        struct Call;

        template<typename Exp_, typename... Args>
        struct Call<Exp_, cong::lang::core::Tuple<Args...>>
        {
        private:
            using TupleOfExp_ = cong::lang::core::Tuple<Args...>;
            static constexpr auto call_({%- for p in def.params -%}std::tuple_element_t<{{loop.index0}}, TupleOfExp_> {{ p.name }}{{' , ' if not loop.last }}{% endfor -%}, ...)
            {
                {% if impl.time_complexity %}
                return {{ impl.time_complexity }};
                {% else %}
                return cong::lang::NaturalStatic<cong::lang::core::natInf>{};
                {% endif %}
            }
        public:
            using Type = std::invoke_result_t<decltype(call_), Args...>;
            static constexpr Type call(Exp_ exp, TupleOfExp_ args) {
                return std::apply(call_, args);
            }
        };
    };

    struct ApplySpace_ {
        template<typename Exp_, typename... Args>
        struct Call;

        template<typename Exp_, typename... Args>
        struct Call<Exp_, cong::lang::core::Tuple<Args...>>
        {
        private:
            using TupleOfExp_ = cong::lang::core::Tuple<Args...>;
            static constexpr auto call_({%- for p in def.params -%}std::tuple_element_t<{{loop.index0}}, TupleOfExp_> {{ p.name }}{{' , ' if not loop.last }}{% endfor -%}, ...)
            {
                {% if impl.space_complexity %}
                return {{ impl.space_complexity }};
                {% else %}
                return cong::lang::NaturalStatic<cong::lang::core::natInf>{};
                {% endif %}
            }
        public:
            using Type = std::invoke_result_t<decltype(call_), Args...>;
            static constexpr Type call(Exp_ exp, TupleOfExp_ args) {
                return std::apply(call_, args);
            }
        };
    };

public:
    template<typename Exp_, typename... Args>
    struct Call<Exp_, cong::lang::core::Tuple<Args...>>
    {
    private:
        using TupleOfExp_ = cong::lang::core::Tuple<Args...>;
        static constexpr auto call_({%- for p in def.params -%}std::tuple_element_t<{{loop.index0}}, TupleOfExp_> {{ p.name }}{{' , ' if not loop.last }}{% endfor -%}, ...)
        {
            {{ impl.expression }}
        }
    public:
        using ApplyTime = ApplyTime_;
        using ApplySpace = ApplySpace_;
        using Type = std::invoke_result_t<decltype(call_), Args...>;
        static constexpr Type call(Exp_ exp, TupleOfExp_ args) {
            return std::apply(call_, args);
        }
    };
};{{' \n' if not loop.last }}{% endfor %} 

template <typename... Exp_>
constexpr
{{ Name_ }}<Exp_...> {{ name_ }}(Exp_&&... args) 
{
    cong::lang::intern::EvalRequirements::Call<Spec{{ Name_ }}, Exp_...>
                ::call(std::forward<Exp_>(args)...);

    return ::cong::lang::bind(
        ::cong::lang::intern::Environment{},
        ::cong::lang::intern::Exp<::cong::lang::intern::FunctionImpl<Dec{{ Name_ }}, Spec{{ Name_ }}>>{},
        std::forward<Exp_>(args)...);
}
{% endcall %}
{% endmacro %}