{% from "macros/c++/namespace.j2" import NamespaceChain with context %}
{% macro FunctionDefinition(def) %}
{% call NamespaceChain(def.ns) %}
{% set Name_ = def.name | title %}
struct Spec{{ Name_ }} {
    static constexpr char const* name = "{{def.name}}";
    static constexpr char const* description = "{{def.description}}";
};

template <typename... Exp_>
using {{ Name_ }} = lang::Bind<
                lang::intern::Environment,
                lang::intern::Exp<lang::intern::FunctionImpl<lang::intern::Spec{{ Name_ }}>>,
                Exp_...>;

template <typename... Exp_>
constexpr
{{ Name_ }}<Exp_...> {{def.name}}(Exp_&&... args) {
    return lang::bind(lang::intern::Environment{},
                      lang::intern::Exp<lang::intern::FunctionImpl<lang::intern::Spec{{ Name_ }}>>{},
                      std::forward<Exp_>(args)...);
}
{% endcall %}
{% endmacro %}